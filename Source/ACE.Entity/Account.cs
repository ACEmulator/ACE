using ACE.Common;
using ACE.Common.Cryptography;
using ACE.Entity.Enum;

using MySql.Data.MySqlClient;
using System;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace ACE.Entity
{
    [DbTable("account", HasAutoGeneratedId = true, AutoGeneratedIdColumn = "accountId")]
    public class Account
    {
        [DbField("accountId", (int)MySqlDbType.UInt32, Insert = false, IsCriteria = true, Update = false)]
        public uint AccountId { get; private set; }

        /// <summary>
        /// login name of the account.  for now, this is immutable.
        /// </summary>
        [DbField("accountName", (int)MySqlDbType.Text, Update = false)]
        public string Name { get; private set; }

        public void SetName(string value)
        {
            Name = value;
        }

        [DbField("accessLevel", (int)MySqlDbType.UInt32)]
        public uint AccessLevel_Binder { get; private set; }

        public AccessLevel AccessLevel
        {
            get { return (AccessLevel)AccessLevel_Binder; }
        }

        public void SetAccessLevel(AccessLevel value)
        {
            AccessLevel_Binder = (uint)value;
        }

        /// <summary>
        /// base64 encoded version of the salt.  salts may not be changed for an account.
        /// </summary>
        [DbField("passwordSalt", (int)MySqlDbType.Text, Update = false)]
        public string Salt { get; private set; }

        public string Digest { get; private set; }

        /// <summary>
        /// the base64 encoded, hashed, nonrecoverable password
        /// </summary>
        [DbField("passwordHash", (int)MySqlDbType.Text)]
        public string Password { private get; set; }

        public void SetPassword(string value)
        {
            Password = GetPasswordHash(value);
        }

        public bool PasswordMatches(string password)
        {
            var input = GetPasswordHash(password);
            return input == Password;
        }

        private string GetPasswordHash(string password)
        {
            byte[] passwordBytes = Encoding.UTF8.GetBytes(password);
            byte[] saltBytes = Convert.FromBase64String(Salt);
            byte[] buffer = passwordBytes.Concat(saltBytes).ToArray();
            byte[] hash;

            // rehash it
            using (SHA512Managed hasher = new SHA512Managed())
            {
                hash = hasher.ComputeHash(buffer);
            }

            return Convert.ToBase64String(hash);
        }

        /// <summary>
        /// creates a new account object and pre-creates a new, random salt
        /// </summary>
        public Account()
        {
            byte[] salt = new byte[64]; // 64 bytes = 512 bits, ideal for use with SHA512
            using (var salter = new RNGCryptoServiceProvider())
            {
                salter.GetNonZeroBytes(salt);
            }

            Salt = Convert.ToBase64String(salt);
        }
    }
}
