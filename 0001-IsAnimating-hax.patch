From f353bf70a2e6423d8253718226b02f42de12e750 Mon Sep 17 00:00:00 2001
From: gmriggs <gmriggs@gmail.com>
Date: Sat, 5 Jan 2019 22:37:59 -0500
Subject: [PATCH] IsAnimating hax

---
 Source/ACE.Server/Managers/EmoteManager.cs         |  2 +-
 Source/ACE.Server/Physics/PhysicsObj.cs            | 22 +++++++++++++-
 Source/ACE.Server/WorldObjects/WorldObject.cs      | 34 +++++++++++++---------
 Source/ACE.Server/WorldObjects/WorldObject_Tick.cs |  3 ++
 4 files changed, 45 insertions(+), 16 deletions(-)

diff --git a/Source/ACE.Server/Managers/EmoteManager.cs b/Source/ACE.Server/Managers/EmoteManager.cs
index 0dc8af68..2932e01a 100644
--- a/Source/ACE.Server/Managers/EmoteManager.cs
+++ b/Source/ACE.Server/Managers/EmoteManager.cs
@@ -628,7 +628,7 @@ public void ExecuteEmote(BiotaPropertiesEmote emoteSet, BiotaPropertiesEmoteActi
                                 var motionTable = DatManager.PortalDat.ReadFromDat<DatLoader.FileTypes.MotionTable>(WorldObject.MotionTableId);
                                 var animLength = motionTable.GetAnimationLength(WorldObject.CurrentMotionState.Stance, (MotionCommand)emote.Motion, MotionCommand.Ready);
 
-                                WorldObject.ExecuteMotion(motion, true, maxRange);
+                                WorldObject.ExecuteMotion(motion, true, maxRange, true);
 
                                 var motionChain = new ActionChain();
                                 motionChain.AddDelaySeconds(animLength);
diff --git a/Source/ACE.Server/Physics/PhysicsObj.cs b/Source/ACE.Server/Physics/PhysicsObj.cs
index 8f9dd589..111e815b 100644
--- a/Source/ACE.Server/Physics/PhysicsObj.cs
+++ b/Source/ACE.Server/Physics/PhysicsObj.cs
@@ -84,7 +84,27 @@ public class PhysicsObj
         /// <summary>
         /// This is managed by MovementManager.MotionInterpreter, and should not be updated anywhere else.
         /// </summary>
-        public bool IsAnimating;
+        public bool IsAnimating { get; set; }
+
+        public bool IsAnimatingDone
+        {
+            get
+            {
+                if (AnimDoneTime == null)
+                    return true;
+
+                if (DateTime.UtcNow >= AnimDoneTime)
+                {
+                    AnimDoneTime = null;
+                    return true;
+                }
+
+                return false;
+            }
+        }
+
+
+        public DateTime? AnimDoneTime;
 
         // server
         public Position RequestPos;
diff --git a/Source/ACE.Server/WorldObjects/WorldObject.cs b/Source/ACE.Server/WorldObjects/WorldObject.cs
index 6471a922..6652e97a 100644
--- a/Source/ACE.Server/WorldObjects/WorldObject.cs
+++ b/Source/ACE.Server/WorldObjects/WorldObject.cs
@@ -7,6 +7,7 @@
 using log4net;
 
 using ACE.Common;
+using ACE.DatLoader;
 using ACE.Database.Models.Shard;
 using ACE.Database.Models.World;
 using ACE.Entity;
@@ -861,39 +862,44 @@ public string GetPluralName()
         /// <summary>
         /// Returns TRUE if this object has non-cyclic animations in progress
         /// </summary>
-        public bool IsAnimating { get => PhysicsObj != null && PhysicsObj.IsAnimating; }
+        public bool IsAnimating { get => PhysicsObj != null && !PhysicsObj.IsAnimatingDone; }
 
         /// <summary>
         /// Executes a motion/animation for this object
         /// adds to the physics animation system, and broadcasts to nearby players
         /// </summary>
         /// <returns>The amount it takes to execute the motion</returns>
-        public float ExecuteMotion(Motion motion, bool sendClient = true, float? maxRange = null)
+        public float ExecuteMotion(Motion motion, bool sendClient = true, float? maxRange = null, bool timerOnly = false)
         {
             var motionCommand = motion.MotionState.ForwardCommand;
 
             if (motionCommand == MotionCommand.Invalid)
                 motionCommand = (MotionCommand)motion.Stance;
 
+            // hardcoded ready?
+            var animLength = MotionTable.GetAnimationLength(MotionTableId, CurrentMotionState.Stance, CurrentMotionState.MotionState.ForwardCommand, motionCommand);
+            CurrentMotionState = motion;
+
             // run motion command on server through physics animation system
             if (PhysicsObj != null && motionCommand != MotionCommand.Invalid)
             {
-                var motionInterp = PhysicsObj.get_minterp();
+                if (!timerOnly)
+                {
+                    var motionInterp = PhysicsObj.get_minterp();
 
-                var rawState = new RawMotionState();
-                rawState.ForwardCommand = 0;    // always 0? must be this for monster sleep animations (skeletons, golems)
-                                                // else the monster will immediately wake back up..
-                rawState.CurrentHoldKey = HoldKey.Run;
-                rawState.CurrentStyle = (uint)motionCommand;
+                    var rawState = new RawMotionState();
+                    rawState.ForwardCommand = 0;    // always 0? must be this for monster sleep animations (skeletons, golems)
+                                                    // else the monster will immediately wake back up..
+                    rawState.CurrentHoldKey = HoldKey.Run;
+                    rawState.CurrentStyle = (uint)motionCommand;
 
-                motionInterp.RawState = rawState;
-                motionInterp.apply_raw_movement(true, true);
+                    motionInterp.RawState = rawState;
+                    motionInterp.apply_raw_movement(true, true);
+                }
+                else
+                    PhysicsObj.AnimDoneTime = DateTime.UtcNow.AddSeconds(animLength);
             }
 
-            // hardcoded ready?
-            var animLength = MotionTable.GetAnimationLength(MotionTableId, CurrentMotionState.Stance, CurrentMotionState.MotionState.ForwardCommand, motionCommand);
-            CurrentMotionState = motion;
-
             // broadcast to nearby players
             if (sendClient)
                 EnqueueBroadcastMotion(motion, maxRange);
diff --git a/Source/ACE.Server/WorldObjects/WorldObject_Tick.cs b/Source/ACE.Server/WorldObjects/WorldObject_Tick.cs
index 360b48e7..ad7b23a0 100644
--- a/Source/ACE.Server/WorldObjects/WorldObject_Tick.cs
+++ b/Source/ACE.Server/WorldObjects/WorldObject_Tick.cs
@@ -163,6 +163,9 @@ public bool UpdateObjectPhysics()
             if (PhysicsObj == null || !PhysicsObj.is_active())
                 return false;
 
+            if (PhysicsObj.IsAnimatingDone)
+                return false;
+
             // arrows / spell projectiles
             var isMissile = Missile ?? false;
 
-- 
2.16.2.windows.1

